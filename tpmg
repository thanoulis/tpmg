#!/usr/bin/env tclsh

package require Tk
# force utf-8 on windows wrapped exe (freewrap workaround)
if {$::tcl_platform(platform) eq "windows" && [encoding system] ne "utf-8" } {
  encoding system utf-8
}

################################################################################
# VARIABLES
#
namespace eval tpmg {
  variable script    {}
  variable return    {}
  variable ok        {___tpmgOK___}
  variable cancel    {___tpmgCancel___}
  variable error     {___tpmgError___}

  array set list {
    radio  {}
    combo  {}
    lcombo {}
  }
  variable response  {}
  variable text      {}
  variable password  {}
  variable value     0

  array set date {
    format {%a %d %b %Y}
    days   {Sun Mon Tue Wed Thu Fri Sat}
    months {0 January February March April May June July August September October November December}
  }
    set now          [clock scan now]
    set date(year)   [clock format $now -format "%Y"]
    set date(month)  [clock format $now -format "%m"]
    set date(day)    [clock format $now -format "%d"]

  # namespace and variables for the help system
  namespace eval help {
    variable Basic {
  usage: tpmg <options> <details>

  basic options:
    dialog windows:
      --calendar      display Calendar dialog
      --color         display Color Select dialog
      --directory     display Directory Select dialog
      --entry         display Entry dialog
      --filesave      display File Save dialog
      --fileselect    display File Select dialog
      --information   display Information dialog
      --list          display List dialog
      --notification  display Notification popup
      --password      display Password dialog
      --progress      display Progress dialog
      --scale         display Scale dialog
      --text          display Text dialog

    help:
      --help          this help
      --help all      print options for all available dialogs
      --help <dialog> print all available options for <dialog>

    other:
      --version       print version information
    }
    variable Calendar {
Display a date selection dialog.
Date format can be customized with "--format" option.
Format options are almost the same with "date" utility from "coreutils".
See "man n clock" (tcl) or "man 1 date" (coreutils) for details.

options for Calendar dialog:
  --title="string"  set window title  [default: "Select Date"]
  --format="string" format date       [default: "%a %d %b %Y"]
  --day="integer"   set initial day   [default: current day]
  --month="integer" set initial month [default: current month]
  --year="integer"  set initial year  [default: current year]
  --help            this help

returns: selected date on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --calendar --title="Select a date" --format="%d%m%y" --day="18" --month="3" --year="1986"
    }
    variable Color {
Display a color selection dialog. Appearance depends on platform.

options for Color Select dialog:
  --title="string"    set window title  [default: "Select a Color"]
  --color="#hexcolor" set initial color [default: "#d9d9d9"]
  --help              this help

returns: color hex code on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --color --title="Choose Color" --color="#eed421"
    }
    variable Directory {
Display a directory selection dialog. Appearance depends on platform.

options for Directory Select dialog:
  --title="string" set window title     [default: "Select a Directory"]
  --exist          directory must exist [no default]
  --help           this help

returns: directory path on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --directory --title="Select a Directory" --exist
    }
    variable Entry {
Display any number of entry dialogs. Default is one.
Configuration is done through "--text" option, with comma separated label texts.

options for Entry dialog:
  --title="string" set window title [default: "Enter Text"]
  --text="csv"     set label text   [default: "Enter text below:"]
  --default="csv"  set initial text [no default]
  --help           this help

returns: entries' list on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --entry --title="Personal Information" --text="First name:,Last name:,email:" --default=",,email@example.com"
    }
    variable FileSave {
Display a file save dialog. Appearance depends on platform.

options for File Save dialog:
  --title="string"  set window title            [default: "Save File"]
  --ext="csv"       set filetype filter         [default: show all files]
  --file="filepath" set initial file            [no default]
  --noconfirm       do not confirm on overwrite [default: confirm overwrite]
  --help            this help

returns: file path on 'Save', 1 on 'Cancel', 255 on error

example: tpmg --filesave --title="Save File" --file="~/myfile.txt" --noconfirm
    }
    variable FileSelect {
Display a file selection dialog. Appearance depends on platform.

options for Files Select dialog:
  --title="string" set window title    [default: "Select Files"]
  --ext="csv"      set filetype filter [default: show all files]
  --single         single selection    [no default]
  --help           this help

returns: file path on 'Open', 1 on 'Cancel', 255 on error
  on multiple selection, returns list

example: tpmg --fileselect --title="Select a File" --ext="*.txt,*" --single
    }
    variable Information {
Display an information dialog.
Supports icons for info, error, question and warning.
Can have a combination of buttons, as okcancel, yesno, retrycancel, etc.
Main message is bold and equals to the first non option string.
All other strings are message details, with every string represent a line.

options for Information dialog:
  --title="string"  set window title         [no default]
  --icon="one of: info,error,question,warning"
                    icon to use in dialog    [default: "info"]
  --button="one of: ok,okcancel,yesno,yesnocancel,retrycancel,abortretryignore"
                    buttons to use in dialog [default: "ok"]
  "first string"    main message (bold)
  "other" "strings" message details (every string in a new line)
  --help            this help

returns: the button name (ok, cancel, yes, no, abort, retry, ignore)

example: tpmg --information --title="Are you sure?" --icon="question" --button="yesnocancel" "All data will be wiped!" "This action cannot be undone." "Proceed?"
    }
    variable List {
Display an option list with radio buttons, combobox or check buttons.
Default type is check buttons.
Configuration is done through "--options" option, with comma separated list.
"Default" option set preselected option in a radio/combobox list, or set "true" values in the check list.

options for List dialog:
  --title="string"     set window title    [default: "Set Options"]
  --text="string"      set label text      [default: "Set options below:"]
  --type="radio|combo|check"
                       set list type       [default: "check"]
  --options="csv"      set options list    [no default]
  --default="radio:string|combo:string|check:csv"
              radio:   default radio value [no default]
              combo:   default radio value [no default]
              check:   set <option> "true" [no default]
  --anchor="w|e|c"     placement in window [default: "w"]
  --edit               can edit combobox   [default: read only]
  --help               this help

returns:
  radio: selected string on 'OK', 1 on 'Cancel', 255 on error
  combo: selected string on 'OK', 1 on 'Cancel', 255 on error
  check: true/false list on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --list --title="Select filetype" --text="Select filetype:" --type="radio" --options="Text File,RTF Document,Word Document" --default="Text File" --anchor="center"
    }
    variable Notification {
Display a notification popup.
Does not need a running notification daemon.
Notification popup will close when clicked, or after "delay" seconds.

options for Notification popup:
  --title="string"         set window title     [default: "tpmg Notification"]
  --delay="integer"        set delay (seconds)  [default: 5]
  --geometry="{width}x{height}±X±Y"             [default: upper right]
      width   popup width in pixels
      height  popup height in pixels
      X       popup X position on screen
      Y       popup Y position on screen
      "width"x"height" or "±X±Y" can be omitted.
  --icon="one of: info,error,question,warning"
                           set popup icon       [default: no icon]
  --background="#hexcolor" set background color [default: "orange"]
  --foreground="#hexcolor" set foreground color [default: "black"]
  "other" "strings"        text to show (every string in a new line)
  --help                   this help

returns: 0 after close, 255 on error

example: tpmg --notification --title="Notify Sith Lord" --delay="10" --geometry="200x50+0+0" --icon="error" --background="#f8a300" --foreground="#000000" "System failure" "Cannot execute order 66"
    }
    variable Password {
Display a classic username/password dialog.
Username entry can be omitted.
Password entry hides text with asterisks.

options for Password dialog:
  --title="string" set window title          [default: "Login As"]
  --nousername     hide the "Username" entry [no default]
  --help           this help

returns: list with username and password on 'OK', 1 on 'Cancel', 255 on error
  --nousername: returns only password

example: tpmg --password --title="Welcome $USER" --nousername
    }
    variable Progress {
Display a progress bar dialog.
Progress dialog reads data from stdin line by line.
Lines must be prefixed with "tpmg:", or are ignored.
If text is a number, the progress bar advances to that number.
Else, it updates the label text.

options for Progress dialog:
  --title="string"    set window title           [default: "Show Progress"]
  --text="string"     set label text             [no default]
  --color="#hexcolor" set progress bar color     [default: Tk default]
  --pulse             pulsating progress bar     [no default]
  --auto              close window on completion [no default]
  --max="integer"     set max bar value          [default: "100"]
  --value="integer"   set initial bar value      [default: "0"]
  --help              this help

returns: 0 on 'OK', 1 on 'Cancel', 255 on error

bugs: wrong behavior on pulsating progress bar (not critical)

example:
#!/usr/bin/env sh
(
echo "tpmg:Starting jobs..."; sleep 1
echo "tpmg:30"; echo "tpmg:Setting variables..."; sleep 1
echo "tpmg:70"; echo "tpmg:Clearing cache..."; sleep 1
echo "This line will be ignored"; sleep 1
echo "tpmg:100"; echo "tpmg:Done."
) | tpmg --progress --color="#948b84" --auto
    }
    variable Scale {
Display a scale dialog.
Min, max and current value can be configured.

options for Scale dialog:
  --title="string"  set window title  [default: "Adjust Value"]
  --text="string"   set label text    [default: "Adjust value below:"]
  --min="integer"   set min value     [default: "0"]
  --max="integer"   set max value     [default: "100"]
  --value="integer" set initial value [default: "0"]
  --step="integer"  set step size     [default: "1"]
  --help            this help

returns: scale value on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --scale --title="Adjust Transparency" --text="Choose window transparency:" --min="0" --max="100" --value="20"
    }
    variable Text {
Display a text information dialog.
Text can be from file, from command line in the form of every string is a new line and from standard input.
In case of multiple inputs, will concatenate the text, with file->string->stdin hierarchy.

options for Text dialog:
  --title="string"  set window title [default: "Show Text"]
  --file="filepath" file to show     [no default]
  --edit            can edit text    [default: cannot edit]
  --font="{font name} size bold|italic|underline|overstrike"
                    font to use      [default: "TkFixedFont"]
  "other" "non option" "strings"
                    text body (every string in a new line)
  --help            this help

returns: 0 on 'OK', 1 on 'Cancel', 255 on error

example: tpmg --text --title="README" --file="~/README.txt" --edit --font="{DejaVu Sans Mono} 12 bold"
    }
  # end of namespace tpmg::help
  }
#end of namespace tpmg
}

################################################################################
# CALENDAR DIALOG
#
# most of calendar code is taken from:
# http://tcltk.free.fr/source/date.tcl
# reference:
# https://wiki.tcl-lang.org/page/An+i15d+date+chooser
# credits to Richard Suchenwirth
#
# calendar initialization
proc tpmg::calendarInit {} {
  tk::canvas .calendar -bg white -width 200 -height 180
  .calendar bind day <1> {
    set item [%W find withtag current]
    set tpmg::date(day) [%W itemcget $item -text]
    tpmg::calendarDraw
  }
  tpmg::Button .calendar 20  30 < {tpmg::calendarAdjust -1  0}
  tpmg::Button .calendar 100 30 > {tpmg::calendarAdjust  1  0}
  tpmg::Button .calendar 120 30 < {tpmg::calendarAdjust  0 -1}
  tpmg::Button .calendar 170 30 > {tpmg::calendarAdjust  0  1}
  tpmg::calendarDraw
}
# adjust month/year values
proc tpmg::calendarAdjust {dmonth dyear} {
  incr tpmg::date(year)  $dyear
  incr tpmg::date(month) $dmonth
  if {$tpmg::date(month) > 12} {
    set tpmg::date(month) 1
    incr tpmg::date(year)
  }
  if {$tpmg::date(month) < 1} {
    set tpmg::date(month) 12
    incr tpmg::date(year) -1
  }
  set dmax [tpmg::calendarDays $tpmg::date(month) $tpmg::date(year)]
  if {$dmax < $tpmg::date(day)} {
    set tpmg::date(day) $dmax
  }
  tpmg::calendarDraw
}
# draw calendar
proc tpmg::calendarDraw {} {
  foreach tag {title otherday day} {
    .calendar delete $tag
  }
  set x0 20; set x $x0; set y 50
  set dx 25; set dy 20
  set xmax [expr {${x0} + ${dx} * 6}]
  set date0 [clock scan ${tpmg::date(month)}/${tpmg::date(day)}/${tpmg::date(year)}]
  set tpmg::date(date) [clock format $date0 -format $tpmg::date(format)]
  set tmonth [lindex $tpmg::date(months) $tpmg::date(month)]
  set tyear $tpmg::date(year)
  .calendar create text [expr {($xmax + $dx) / 2}] 10 \
    -text $tpmg::date(date) -fill black -tag title
  .calendar create text 60 30 -text $tmonth -fill blue -tag title
  .calendar create text 145 30 -text $tyear -fill blue -tag title
  foreach i $tpmg::date(days) {
    .calendar create text $x $y -text $i -fill blue -tag title
    incr x $dx
  }
  set first ${tpmg::date(month)}/1/${tpmg::date(year)}
  set weekday [clock format [clock scan $first] -format %w]
  set x [expr {$x0 + $weekday * $dx}]
  set x1 $x; set offset 0
  incr y $dy
  while {$weekday} {
    set t [clock scan "$first [incr offset] days ago"]
    scan [clock format $t -format "%d"] %d day
    .calendar create text [incr x1 -$dx] $y -text $day \
      -fill grey -tag otherday
    incr weekday -1
  }
  set dmax [tpmg::calendarDays $tpmg::date(month) $tpmg::date(year)]
  for {set d 1} {$d <= $dmax} {incr d} {
    set id [.calendar create text $x $y -text $d -tag day]
    if {$d == $tpmg::date(day)} {
      eval .calendar create rect [.calendar bbox $id] \
        -fill orange -outline orange -tag day
    }
    .calendar raise $id
    if {[incr x $dx] > $xmax} {set x $x0; incr y $dy}
  }
  if {$x != $x0} {
    for {set d 1} {$x <= $xmax} {incr d; incr x $dx} {
      .calendar create text $x $y -text $d -fill grey -tag otherday
    }
  }
}
# calculate days
proc tpmg::calendarDays {month year} {
  if {$month == 12} {set month 0; incr year}
  clock format [clock scan "[incr month]/1/${year} 1 day ago"] -format %d
}
# '<' '>' buttons
proc tpmg::Button {w x y text command} {
  set txt [$w create text $x $y -text " $text "]
  set btn [eval $w create rect [$w bbox $txt] -fill white -outline white]
  $w raise $txt
  foreach i [list $txt $btn] {
    $w bind $i <1> $command
  }
}
# main calendar dialog
proc tpmg::Calendar {args} {
  set title "Select Date"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --format=* {
        set tpmg::date(format) [string range $option 9 end]
      }
      --day=* {
        for {set i 1} {$i <= 31} {incr i} {
          lappend dday $i
        }
        set day [string range $option 6 end]
        if {$day ni $dday} {
          puts stderr "not a valid day: $day"
          puts stderr "use one of: $dday"
          return $tpmg::error
        }
        set tpmg::date(day) $day
      }
      --month=* {
        for {set i 1} {$i <= 12} {incr i} {
          lappend dmonth $i
        }
        set month [string range $option 8 end]
        if {$month ni $dmonth} {
          puts stderr "not a valid month: $month"
          puts stderr "use one of: $dmonth"
          return $tpmg::error
        }
        set tpmg::date(month) $month
      }
      --year=* {
        set year [string range $option 7 end]
        if {![string is integer $year]} {
          puts stderr "not a year: $year"
          return $tpmg::error
        }
        set tpmg::date(year) $year
      }
      --help {
        tpmg::Help "calendar"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "calendar" stderr
        return $tpmg::error
      }
    }
  }
  tpmg::calendarInit
  ttk::button .ok -text "OK" -command {
    set tpmg::response $tpmg::date(date)
  }
  ttk::button .cancel -text "Cancel" -command {
    set tpmg::response $tpmg::cancel
  }
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  pack .calendar -fill both -expand true
  pack .ok .cancel -padx 10 -pady 5 -side left
  wm title     . $title
  wm resizable . 0 0
  focus .ok
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# COLOR SELECT DIALOG
#
proc tpmg::Color {args} {
  set title "Select a Color"
  set color "#d9d9d9"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --color=* {
        set color [string range $option 8 end]
      }
      --help {
        tpmg::Help "color"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "color" stderr
        return $tpmg::error
      }
    }
  }
  wm withdraw .
  if {[catch {set response \
    [tk_chooseColor -title $title -initialcolor $color]} msg]} {
    puts stderr $msg
    return $tpmg::error
  }
  if {$response eq ""} {return $tpmg::cancel}
  return $response
}

################################################################################
# DIRECTORY SELECT DIALOG
#
proc tpmg::Directory {args} {
  set title "Select a Directory"
  set exist "false"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --exist {
        set exist "true"
      }
      --help {
        tpmg::Help "directory"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "directory" stderr
        return $tpmg::error
      }
    }
  }
  wm withdraw .
  set response [file nativename [tk_chooseDirectory -title $title \
    -mustexist $exist]]
  if {$response eq ""} {return $tpmg::cancel}
  return $response
}

################################################################################
# ENTRY DIALOG
#
proc tpmg::Entry {args} {
  set title   "Enter Text"
  set text    [list "Enter text below:"]
  set default ""
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --text=*  {
        set text [split [string range $option 7 end] ","]
        set tpmg::value [llength $text]
      }
      --default=* {
        set default [split [string range $option 10 end] ","]
      }
      --help {
        tpmg::Help "entry"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "entry" stderr
        return $tpmg::error
      }
    }
  }
  if {$text eq ""} {
    puts stderr "no entries defined"
    tpmg::Help "entry" stderr
    return $tpmg::error
  }
  set i 0
  foreach item $text {
    set tpmg::list($i) ""
    set entry [string cat "." $i]
    set frame [string cat $entry "frame"]
    ttk::labelframe $frame -relief flat -text $item
    ttk::entry $entry -textvariable tpmg::list($i)
    if {$default ne ""} {
      set tpmg::list($i) [lindex $default $i]
    }
    pack $entry -in $frame
    pack $frame -pady 5
    incr i
  }
  ttk::button .ok -text "OK" -command {
    for {set i 0} {$i <= $tpmg::value} {incr i} {
      lappend tpmg::response $tpmg::list($i)
    }
  }
  ttk::button .cancel -text "Cancel" -command {
    set tpmg::response $tpmg::cancel
  }
  pack .ok .cancel -padx 10 -pady 5 -side left
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  # focus first entry
  focus .0
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# FILE SAVE DIALOG
#
proc tpmg::FileSave {args} {
  set title     "Save File"
  set filetypes ""
  set file      ""
  set confirm   "true"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --ext=* {
        set extlist [split [string range $option 6 end] ","]
        foreach ext $extlist {
          lappend filetypes [list [string toupper $ext] $ext]
        }
      }
      --file=* {
        set file [file nativename [string range $option 7 end]]
      }
      --noconfirm {
        set confirm "false"
      }
      --help {
        tpmg::Help "filesave"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "filesave" stderr
        return $tpmg::error
      }
    }
  }
  wm withdraw .
  set response [file nativename [tk_getSaveFile -title $title \
    -filetypes $filetypes -confirmoverwrite $confirm -initialfile $file]]
  if {$response eq ""} {return $tpmg::cancel}
  return $response
}

################################################################################
# FILE SELECT DIALOG
#
proc tpmg::FileSelect {args} {
  set title     "Select Files"
  set filetypes ""
  set single    "true"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --ext=* {
        set extlist [split [string range $option 6 end] ","]
        foreach ext $extlist {
          lappend filetypes [list [string toupper $ext] $ext]
        }
      }
      --single {
        set single "false"
      }
      --help {
        tpmg::Help "fileselect"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "fileselect" stderr
        return $tpmg::error
      }
    }
  }
  wm withdraw .
  set response [file nativename [tk_getOpenFile -title $title \
    -filetypes $filetypes -multiple $single]]
  if {$response eq ""} {return $tpmg::cancel}
  return $response
}

################################################################################
# INFORMATION DIALOG
#
proc tpmg::Information {args} {
  set default ""
  set icon    "info"
  set type    "ok"
  set title   ""
  set message ""
  set detail  [list]
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --icon=* {
        set valid [list error info question warning]
        set icon [string range $option 7 end]
        if {$icon ni $valid} {
          puts stderr "unknown --icon option: $icon"
          puts stderr "use one of: $valid"
          return $tpmg::error
        }
      }
      --button=* {
        set valid [list ok okcancel yesno yesnocancel retrycancel abortretrycancel]
        set type [string range $option 9 end]
        if {$type ni $valid} {
          puts stderr "unknown --button option: ${type}"
          puts stderr "use one of: $valid"
          return $tpmg::error
        }
      }
      --help {
        tpmg::Help "information"
        exit 0
      }
      default {
        if {$message eq ""} {
          set message $option
        } else {
          lappend detail $option
        }
      }
    }
  }
  # define default button (on Enter/Return)
  switch -- [string index $type 0] {
    o {set default "ok"}
    y {set default "yes"}
    r {set default "retry"}
    a {set default "retry"}
  }
  # every string in details is a line
  if {$detail ne ""} {
    set detail [join $detail "\n"]
  }
  set cmd [list tk_messageBox]
  foreach config [list title icon type default message detail] {
    lappend cmd [string cat "-" $config] [subst $[subst $config]]
  }
  wm withdraw .
  if {[catch {set response [{*}$cmd]} msg]} {
    puts stderr $msg
    return $tpmg::error
  } else {
    return $response
  }
}

################################################################################
# LIST DIALOG
#
proc tpmg::List {args} {
  set title   "Set Options"
  set text    "Set options below:"
  set type    "check"
  set options ""
  set anchor  "w"
  set default ""
  set state   "readonly"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --text=* {
        set text [string range $option 7 end]
      }
      --type=* {
        set valid [list radio combo check]
        set type [string range $option 7 end]
        if {$type ni $valid} {
          puts stderr "unknown --type option: $type"
          puts stderr "use one of: $valid"
          return $tpmg::error
        }
      }
      --options=* {
        set options [split [string range $option 10 end] ","]
        set tpmg::value [llength $options]
      }
      --anchor=* {
        set valid [list w e c]
        set anchor [string range $option 9 end]
        if {$anchor ni $valid} {
          puts stderr "unknown --anchor option: $anchor"
          puts stderr "use one of: $valid"
          return $tpmg::error
        }
      }
      --default=* {
        set default [split [string range $option 10 end] ","]
      }
      --edit {
        set state "normal"
      }
      --help {
        tpmg::Help "list"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "list" stderr
        return $tpmg::error
      }
    }
  }
  if {$options eq ""} {
    puts stderr "no options defined"
    tpmg::Help "list" stderr
    return $tpmg::error
  }
  ttk::labelframe .list -relief flat -text $text
  if {$type eq "radio"} {
    set tpmg::list(radio) [join $default]
    set i 0
    foreach item $options {
      set litem [string cat "." $i]
      ttk::radiobutton $litem -text $item -value $item \
        -variable tpmg::list(radio)
      pack $litem -in .list -anchor $anchor
      incr i
    }
    ttk::button .ok -text "OK" -command {
      lappend tpmg::response $tpmg::list(radio)
    }
  } elseif {$type eq "combo"} {
    set tpmg::list(lcombo) $options
    set tpmg::list(combo) [join $default]
    ttk::combobox .combo -state $state -values $tpmg::list(lcombo) \
      -textvariable tpmg::list(combo)
    pack .combo -in .list -anchor $anchor
    ttk::button .ok -text "OK" -command {
      lappend tpmg::response $tpmg::list(combo)
    }
  } else {
    set i 0
    foreach item $options {
      set litem [string cat "." $i]
      if {$item in $default} {
        set tpmg::list($i) "true"
      } else {
        set tpmg::list($i) "false"
      }
      ttk::checkbutton $litem -text $item \
        -onvalue "true" -offvalue "false" \
        -variable tpmg::list($i)
      pack $litem -in .list -anchor $anchor
      incr i
    }
    ttk::button .ok -text "OK" -command {
      for {set i 0} {$i <= $tpmg::value} {incr i} {
        lappend tpmg::response $tpmg::list($i)
      }
    }
  }
  ttk::button .cancel -text "Cancel" -command {set tpmg::response $tpmg::cancel}
  pack .list -padx 5 -pady 5
  pack .ok .cancel -padx 10 -pady 5 -side left
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  focus .ok
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# NOTIFICATION
#
proc tpmg::Notification {args} {
  set title    "tpmg Notification"
  set delay    5
  set geometry "180x50+[expr {[winfo screenwidth .] - 180}]+0"
  set icon     ""
  set bg       "yellow"
  set fg       "black"
  set text     ""
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --delay=* {
        set delay [string range $option 8 end]
        if {![string is integer $delay]} {
          puts stderr "not an integer: $delay"
          return $tpmg::error
        }
      }
      --geometry=* {
        set geometry [string range $option 11 end]
      }
      --icon=* {
        set licon [list info error question warning]
        set icon [string range $option 7 end]
        if {$icon ni $licon} {
          puts stderr "not a valid icon: $icon"
          puts stderr "use one of: $licon"
          return $tpmg::error
        }
      }
      --background=* {
        set bg [string range $option 13 end]
      }
      --foreground=* {
        set fg [string range $option 13 end]
      }
      --help {
        tpmg::Help "notification"
        exit 0
      }
      default {
        append text $option "\n"
      }
    }
  }
  if {[set text [string range $text 0 end-1]] eq ""} {
    return $tpmg::error
  }
  tk::label .label -background $bg -foreground $fg -text $text
  if {$icon ne ""} {
    tk::label .icon -background $bg -foreground $fg -bitmap $icon
    pack .icon .label -padx 0 -pady 0 -fill both -expand true -side left
  } else {
    pack .label -padx 0 -pady 0 -fill both -expand true
  }
  bind all <ButtonPress-1> {set tpmg::response $tpmg::ok}
  wm title      . $title
  wm attributes . -topmost true
  wm attributes . -type notification
  wm overrideredirect . true
  wm geometry  . $geometry
  wm resizable . 0 0
  after [expr {$delay * 1000}] {set tpmg::response $tpmg::ok}
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# PASSWORD DIALOG
#
proc tpmg::Password {args} {
  set title    "Login As"
  set username "true"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --nousername {
        set username "false"
      }
      --help {
        tpmg::Help "password"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "password" stderr
        return $tpmg::error
      }
    }
  }
  ttk::labelframe .fuser -relief flat -text "Username:"
  ttk::labelframe .fpass -relief flat -text "Password:"
  ttk::entry .user -textvariable tpmg::text
  ttk::entry .pass -show "*" -textvariable tpmg::password
  ttk::button .ok -text "OK" -command {
    if {$tpmg::text eq ""} {
      set tpmg::response $tpmg::password
    } else {
      lappend tpmg::response \
        $tpmg::text $tpmg::password
    }
  }
  ttk::button .cancel -text "Cancel" -command {
    set tpmg::response $tpmg::cancel
  }
  pack .user -in .fuser
  pack .pass -in .fpass
  if {$username eq "false"} {
    pack .fpass -pady 5
    focus .pass
  } else {
    pack .fuser .fpass -pady 5
    focus .user
  }
  pack .ok .cancel -padx 10 -pady 5 -side left
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# PROGRESS DIALOG
#
# read from pipe helper proc/coroutine
proc tpmg::readPipe {auto} {
  yield [after 1 [info coroutine]]
  while {[gets stdin line] >= 0} {
    if {[string range $line 0 4] eq "tpmg:"} {
      set line [string range $line 5 end]
      if {[string is digit $line]} {
        set tpmg::value $line
      } else {
        set tpmg::text $line
      }
    }
    yield [after 10 [info coroutine]]
  }
  .ok configure -state normal
  focus .ok
  # auto close progress window
  if {$auto eq "true"} {.ok invoke}
}

proc tpmg::Progress {args} {
  set title "Show Progress"
  set text  ""
  set color [ttk::style lookup TProgressbar -background]
  set type  "determinate"
  set auto  "false"
  set max   100
  set value 0
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --text=* {
        set tpmg::text [string range $option 7 end]
      }
      --color=* {
        set color [string range $option 8 end]
      }
      --pulse {
        set type "indeterminate"
      }
      --auto {
        set auto "true"
      }
      --max=* {
        set max [string range $option 6 end]
        if {![string is integer $max]} {
          puts stderr "not an integer: $max"
          return $tpmg::error
        }
      }
      --value=* {
        set value [string range $option 8 end]
        if {![string is integer $value]} {
          puts stderr "not an integer: $value"
          return $tpmg::error
        }
        set tpmg::value $value
      }
      --help {
        tpmg::Help "progress"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "progress" stderr
        return $tpmg::error
      }
    }
  }
  ttk::style configure TProgressbar -background $color
  ttk::frame .f
  ttk::label .label -textvariable tpmg::text
  ttk::progressbar .progress -mode $type -maximum $max -value $value \
    -variable tpmg::value
  ttk::button .ok -text "OK" -state disabled \
    -command {set tpmg::response $tpmg::ok}
  ttk::button .cancel -text "Cancel" \
    -command {set tpmg::response $tpmg::cancel}
  pack .label .progress -in .f -fill x
  pack .f -padx 5 -pady 5 -fill x
  pack .ok .cancel -padx 10 -pady 10 -side left
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  # call read from pipe - bar update coroutine
  coroutine updateProgress tpmg::readPipe $auto
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# SCALE DIALOG
#
proc tpmg::Scale {args} {
  set title "Adjust Value"
  set text  "Adjust value below:"
  set from  0
  set to    100
  set value 0
  set step  1
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --text=*  {
        set text [string range $option 7 end]
      }
      --min=* {
        set from [string range $option 6 end]
        if {![string is integer $from]} {
          puts stderr "not an integer: $from"
          return $tpmg::error
        }
        set tpmg::value $from
      }
      --max=* {
        set to [string range $option 6 end]
        if {![string is integer $to]} {
          puts stderr "not an integer: $to"
          return $tpmg::error
        }
      }
      --value=* {
        set value [string range $option 8 end]
        if {![string is integer $value]} {
          puts stderr "not an integer: $value"
          return $tpmg::error
        }
        set tpmg::value $value
      }
      --step=* {
        set step [string range $option 7 end]
      }
      --help {
        tpmg::Help "scale"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help "scale" stderr
        return $tpmg::error
      }
    }
  }
  # resolve possible conflict on value
  if {$from != 0 && $value != 0} {
    set tpmg::value $value
  }
  ttk::labelframe .fscale -relief flat -text $text
  # ttk::scale looks better, but lacks the -resolution option
  tk::scale .scale -orient horizontal -sliderrelief groove \
    -from $from -to $to -resolution $step \
    -variable tpmg::value
  ttk::button .ok -text "OK" -command {
    set tpmg::response $tpmg::value
  }
  ttk::button .cancel -text "Cancel" -command {
    set tpmg::response $tpmg::cancel
  }
  pack .scale -in .fscale -fill x
  pack .fscale -padx 10 -pady 5 -fill x -expand true
  pack .ok .cancel -padx 10 -pady 5 -expand true -side left
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# TEXT DIALOG
#
proc tpmg::Text {args} {
  set title "Show Text"
  set file  ""
  set text  [list]
  set edit  "false"
  set wrap  "none"
  set font  "TkFixedFont"
  foreach option {*}$args {
    switch -glob -- $option {
      --title=* {
        set title [string range $option 8 end]
      }
      --file=*  {
        set file [file nativename [string range $option 7 end]]
        if {[file isfile $file] == 0 || [file readable $file] == 0} {
          puts stderr "${::argv0}: cannot open $file"
          return $tpmg::error
        }
      }
      --edit {
        set edit "true"
      }
      --wrap {
        set wrap "word"
      }
      --font=* {
        set font [string range $option 7 end]
      }
      --help {
        tpmg::Help "text"
        exit 0
      }
      default {
        lappend text $option
      }
    }
  }
  ttk::frame .f
  tk::text .text -relief sunken -highlightthickness 0 -wrap $wrap \
    -xscrollcommand {.xscroll set} -yscrollcommand {.yscroll set}
  ttk::scrollbar .yscroll -orient vertical   -command {.text yview}
  ttk::scrollbar .xscroll -orient horizontal -command {.text xview}
  ttk::button .ok -text "OK" -command {set tpmg::response $tpmg::ok}
  ttk::button .cancel -text "Cancel" -command {set tpmg::response $tpmg::cancel}
  grid .text    -in .f -row 0 -column 0 -sticky nswe
  grid .yscroll -in .f -row 0 -column 1 -sticky ns
  grid .xscroll -in .f -row 1 -column 0 -sticky we
  grid rowconfigure    .f .text -weight 1
  grid columnconfigure .f .text -weight 1
  pack .f -fill both -expand true
  pack .ok .cancel -padx 10 -pady 5 -side left -expand true
  # text from file
  if {$file ne ""} {
    if {[catch {set data [open $file r]} msg]} {
      puts stderr $msg
      return $tpmg::error
    }
    chan configure $data -translation auto
    .text insert end [chan read $data]
    chan close $data
  }
  # text from command line
  if {$text ne ""} {
    .text insert end [join $text "\n"]
    .text insert end "\n"
  }
  # text from pipe
  chan event stdin readable {
    set data ""
    while {[gets stdin line] >= 0} {
      append data $line "\n"
    }
    chan event stdin readable {}
    set data [string range $data 0 end-1]
    if {[llength $data] > 0} {
      set state [.text cget -state]
      .text configure -state normal
      .text insert end $data
      .text configure -state $state
    }
  }
  if {$edit eq "false"} {
    .text configure -state disabled
  }
  .text configure -font $font
  .text mark set insert 0.0
  .text see insert
  bind all <Return> {.ok invoke}
  bind all <Escape> {.cancel invoke}
  wm title     . $title
  wm resizable . 0 0
  focus .text
  vwait tpmg::response
  return $tpmg::response
}

################################################################################
# HELP SYSTEM
#
proc tpmg::Help {{args ""} {out "stdout"}} {
  switch -- $args {
    all {
      set all [info vars ::tpmg::help::*]
      foreach help $all {
        set header [lindex [split $help "::"] end]
        if {$header eq "Basic"} {continue}
        puts $out "#### $header ####"
        puts $out [subst $[subst $help]]
      }
      exit 0
    }
    calendar     {set help $tpmg::help::Calendar}
    color        {set help $tpmg::help::Color}
    dir          {set help $tpmg::help::Directory}
    directory    {set help $tpmg::help::Directory}
    entry        {set help $tpmg::help::Entry}
    filesave     {set help $tpmg::help::FileSave}
    fileselect   {set help $tpmg::help::FileSelect}
    info         {set help $tpmg::help::Information}
    information  {set help $tpmg::help::Information}
    list         {set help $tpmg::help::List}
    notification {set help $tpmg::help::Notification}
    password     {set help $tpmg::help::Password}
    progress     {set help $tpmg::help::Progress}
    scale        {set help $tpmg::help::Scale}
    text         {set help $tpmg::help::Text}
    ""           {set help $tpmg::help::Basic}
    default {
      puts stderr "unknown help option: $args"
      puts stderr $tpmg::help::Basic
      exit 255
    }
  }
  puts $out $help
}

proc tpmg::Version {version} {
  puts stdout "tpmg $version"
  puts stdout "Runs on Tcl/Tk [info patchlevel]"
  puts stdout "Copyright © 2020 Thanos Zygouris <athanasios.zygouris@gmail.com>"
  puts stdout ""
}

################################################################################
# ARGUMENT PARSING
#
proc tpmg::readArgs {} {
  set value 0
  if {$::argc == 0} {
    tpmg::Help {} stderr
    exit 255
  }
  foreach option $::argv {
    set optidx [lsearch -exact $::argv $option]
    set args [lrange $::argv [expr {$optidx + 1}] end]
    switch -- $option {
      --color {
        set tpmg::script [list tpmg::Color $args]
        return 0
      }
      --dir {
        set tpmg::script [list tpmg::Directory $args]
        return 0
      }
      --directory {
        set tpmg::script [list tpmg::Directory $args]
        return 0
      }
      --fileselect {
        set tpmg::script [list tpmg::FileSelect $args]
        return 0
      }
      --filesave {
        set tpmg::script [list tpmg::FileSave $args]
        return 0
      }
      --info {
        set tpmg::script [list tpmg::Information $args]
        return 0
      }
      --information {
        set tpmg::script [list tpmg::Information $args]
        return 0
      }
      --password {
        set tpmg::script [list tpmg::Password $args]
        return 0
      }
      --entry {
        set tpmg::script [list tpmg::Entry $args]
        return 0
      }
      --scale {
        set tpmg::script [list tpmg::Scale $args]
        return 0
      }
      --text {
        set tpmg::script [list tpmg::Text $args]
        return 0
      }
      --list {
        set tpmg::script [list tpmg::List $args]
        return 0
      }
      --progress {
        set tpmg::script [list tpmg::Progress $args]
        return 0
      }
      --calendar {
        set tpmg::script [list tpmg::Calendar $args]
        return 0
      }
      --notification {
        set tpmg::script [list tpmg::Notification $args]
        return 0
      }
      --help {
        tpmg::Help $args
        exit 0
      }
      --version {
        tpmg::Version "0.6.0"
        exit 0
      }
      default {
        puts stderr "unknown option: $option"
        tpmg::Help {} stderr
        exit 255
      }
    }
  }
}

################################################################################
# MAIN PROGRAM
#
bind all <KP_Enter> {event generate %W <Return>}
wm protocol . WM_DELETE_WINDOW {exit 1}
tpmg::readArgs
set tpmg::return [{*}$tpmg::script]
if false {
} elseif {$tpmg::return eq $tpmg::error} {
  exit 255
} elseif {$tpmg::return eq $tpmg::cancel} {
  exit 1
} elseif {$tpmg::return eq $tpmg::ok} {
  exit 0
} else {
  foreach line $tpmg::return {
    puts stdout $line
  }
  exit 0
}
